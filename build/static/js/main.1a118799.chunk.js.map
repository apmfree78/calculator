{"version":3,"sources":["helper.js","components/EquationList.js","components/KeyPad.js","components/KeyPadOps.js","components/KeyBoard.js","components/App.js","index.js"],"names":["operators","a","b","sin","x","Math","cos","calc","full","num1","op","num2","first","parseFloat","second","trig","calcAnswer","formula","answer","prevAnswer","replace","console","log","toFixed","toString","EquationList","formulas","removeFormula","id","className","map","index","onClick","KeyPad","grid","onClickFunction","children","type","KeyPadOps","KeyBoard","clearState","handleInput","calculateInput","operatorNoMinus","trigOperators","App","useState","setAnswer","input","setInput","inputString","setInputString","JSON","parse","localStorage","getItem","setFormulas","useEffect","setItem","stringify","value","inputVal","inputStr","ans","prevInput","includes","test","substring","length","isNaN","formulasCopy","unshift","splice","render","document","querySelector"],"mappings":"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","file":"static/js/main.1a118799.chunk.js","sourcesContent":["//decimal point precision of answer\nconst DECIMALS = 4;\n\n//defining object containing all math operations\nconst operators = {\n  '+': (a, b) => a + b,\n  '-': (a, b) => a - b,\n  '*': (a, b) => a * b,\n  '/': (a, b) => a / b,\n  '^': (a, b) => a ** b,\n  sin: (x) => Math.sin(x),\n  cos: (x) => Math.cos(x),\n};\n\n//call back function for reg replace that will\n//execute calculation and return result\n//works for following operators : *,-,+,/\nconst calc = (full, num1, op, num2) => {\n  if (op in operators) {\n    //if first [*/+-] second\n    const first = parseFloat(num1);\n    const second = parseFloat(num2);\n    return operators[op](first, second);\n  }\n};\n\n//call back function for reg replace that will\n//execute calculation and return result\n//works for trig operators: sin, cos\nconst trig = (full, op, num1) => {\n  if (op in operators) {\n    const first = parseFloat(num1);\n    return operators[op](first);\n  }\n};\n\n// main function that calculates the result of the formula inputed by the user\n// so if user inputs \"2*3^2+5*5+10/2\" , it will take this string and return \"36\"\n// accepts negatives numbers and floating point numbers\n//operations accepted currently : * / + - ^\nexport function calcAnswer(formula) {\n  let answer = formula;\n  let prevAnswer = answer;\n\n  //recursivly parse bracket\n  // for  1+2*(5+1)+4/(1+1) => 5+1 and 1+1 => 6 and 2\n  do {\n    prevAnswer = answer;\n    answer = answer.replace(/\\(([^)(]*)\\)/g, (full, formula) =>\n      calcAnswer(formula)\n    );\n    console.log(answer);\n  } while (answer !== prevAnswer);\n\n  //find trig operations\n  //loop through until all ^ operations are done\n  do {\n    prevAnswer = answer;\n    answer = answer.replace(/(sin|cos)(-?\\d+\\.?\\d*)/g, trig);\n    // console.log(answer);\n  } while (answer !== prevAnswer);\n\n  //find ^ operations\n  //loop through until all ^ operations are done\n  do {\n    prevAnswer = answer;\n    answer = answer.replace(/((?:(?<!\\d)-?)\\d+\\.?\\d*)(\\^)(-?\\d+\\.?\\d*)/g, calc);\n    // console.log(answer);\n  } while (answer !== prevAnswer);\n\n  //find * & / operations\n  //loop through until all * and / operations are done\n  do {\n    prevAnswer = answer;\n    answer = answer\n      .replace(/((?:(?<!\\d)-?)\\d+\\.?\\d*)(\\*)(-?\\d+\\.?\\d*)/g, calc)\n      .replace(/((?:(?<!\\d)-?)\\d+\\.?\\d*)(\\/)(-?\\d+\\.?\\d*)/g, calc);\n    // console.log(answer);\n  } while (answer !== prevAnswer);\n\n  //find - operations\n  //loop through until all - operations are done\n  do {\n    prevAnswer = answer;\n    answer = answer.replace(/(-?\\d+\\.?\\d*)(-)(-?\\d+\\.?\\d*)/g, calc);\n    // console.log(answer);\n  } while (answer !== prevAnswer);\n\n  //find + operations\n  //loop through until all + operations are done\n  do {\n    prevAnswer = answer;\n    answer = answer.replace(/(-?\\d+\\.?\\d*)(\\+)(-?\\d+\\.?\\d*)/g, calc);\n    // console.log(answer);\n  } while (answer !== prevAnswer);\n\n  //returning final result correctly formatted\n  return +parseFloat(answer).toFixed(DECIMALS).toString();\n}\n","import React from 'react';\n\nconst EquationList = ({ formulas, removeFormula }) => {\n  return (\n    <div\n      id='formulas'\n      className='d-flex flex-column justify-content-around align-items-center'>\n      <span className='inputstring formulalist' key='0'>\n        Equation List\n      </span>\n      {formulas.map((formula, index) => {\n        return (\n          <span\n            className='inputstring formulalist d-flex flex-row justify-content-between align-items-center'\n            key={index}>\n            <div id='formula'>{formula}</div>\n            <i className='fa fa-close' onClick={() => removeFormula(index)}></i>\n          </span>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default EquationList;\n","import React from 'react';\n\n//Generic reusable button for calculator\nconst KeyPad = ({ grid, index, onClickFunction, children }) => {\n  return (\n    <button\n      className={grid}\n      type='submit'\n      id={index}\n      index={index}\n      onClick={onClickFunction}>\n      {children}\n    </button>\n  );\n};\n\nexport default KeyPad;\n","import React from 'react';\n\n//Buttons on calculator specifically for [1-9] and [*/-+] +\n//PLUS other operations we add in future\nconst KeyPadOps = ({ grid, onClickFunction, children }) => {\n  return (\n    <button\n      className={grid}\n      type='submit'\n      id={children}\n      index={children}\n      onClick={() => onClickFunction(children)}>\n      {children}\n    </button>\n  );\n};\n\nexport default KeyPadOps;\n","import React from 'react';\nimport KeyPad from './KeyPad';\nimport KeyPadOps from './KeyPadOps';\n\n//Generic reusable button for calculator\nconst KeyBoard = ({ clearState, handleInput, calculateInput }) => {\n  return (\n    <>\n      {/* top row below main screen */}\n      <div id='left-pad' className='col-9'>\n        <div className='row'>\n          <KeyPad grid='col-8' index='clear' onClickFunction={clearState}>\n            AC\n          </KeyPad>\n          <KeyPadOps grid='col-4' onClickFunction={handleInput}>\n            cos\n          </KeyPadOps>\n        </div>\n        {/* ********************************************* */}\n        {/* ********************************************* */}\n        {/* row of commands (2nd row) */}\n        <div className='row'>\n          <KeyPadOps grid='col-4' onClickFunction={handleInput}>\n            (\n          </KeyPadOps>\n          <KeyPadOps grid='col-4' onClickFunction={handleInput}>\n            )\n          </KeyPadOps>\n          <KeyPadOps grid='col-4' onClickFunction={handleInput}>\n            sin\n          </KeyPadOps>\n        </div>\n        {/* ********************************************* */}\n        {/* ********************************************* */}\n        {/* 3st row of numbers  */}\n        <div className='row'>\n          <KeyPadOps grid='col-4' onClickFunction={handleInput}>\n            1\n          </KeyPadOps>\n          <KeyPadOps grid='col-4' onClickFunction={handleInput}>\n            2\n          </KeyPadOps>\n          <KeyPadOps grid='col-4' onClickFunction={handleInput}>\n            3\n          </KeyPadOps>\n        </div>\n        {/* ********************************************* */}\n        {/* ********************************************* */}\n\n        {/* 4th row of numbers */}\n        <div className='row'>\n          <KeyPadOps grid='col-4' onClickFunction={handleInput}>\n            4\n          </KeyPadOps>\n          <KeyPadOps grid='col-4' onClickFunction={handleInput}>\n            5\n          </KeyPadOps>\n          <KeyPadOps grid='col-4' onClickFunction={handleInput}>\n            6\n          </KeyPadOps>\n        </div>\n        {/* ********************************************* */}\n        {/* ********************************************* */}\n        {/* 5th row of numbers */}\n        <div className='row'>\n          <KeyPadOps grid='col-4' onClickFunction={handleInput}>\n            7\n          </KeyPadOps>\n          <KeyPadOps grid='col-4' onClickFunction={handleInput}>\n            8\n          </KeyPadOps>\n          <KeyPadOps grid='col-4' onClickFunction={handleInput}>\n            9\n          </KeyPadOps>\n        </div>\n        {/* ********************************************* */}\n        {/* ********************************************* */}\n        {/* 6th row of numbers + period */}\n        <div className='row'>\n          <KeyPadOps grid='col-8' onClickFunction={handleInput}>\n            0\n          </KeyPadOps>\n          <KeyPadOps grid='col-4' onClickFunction={handleInput}>\n            .\n          </KeyPadOps>\n        </div>\n      </div>\n      {/*end of left-pad, left side of key pad\n        now beginning right pad that includes remaining operations\n        and '=' */}\n      <div id='right-pad' className='col-3'>\n        <div className='row'>\n          <KeyPadOps grid='col-12' onClickFunction={handleInput}>\n            /\n          </KeyPadOps>\n          <KeyPadOps grid='col-12' onClickFunction={handleInput}>\n            ^\n          </KeyPadOps>\n          <KeyPadOps grid='col-12' onClickFunction={handleInput}>\n            *\n          </KeyPadOps>\n          <KeyPadOps grid='col-12' onClickFunction={handleInput}>\n            -\n          </KeyPadOps>\n          <KeyPadOps grid='col-12' onClickFunction={handleInput}>\n            +\n          </KeyPadOps>\n          <KeyPad grid='col-12' index='clear' onClickFunction={calculateInput}>\n            =\n          </KeyPad>\n        </div>\n      </div>\n      {/* end of right pad */}\n    </>\n  );\n};\n\nexport default KeyBoard;\n","import React, { useState, useEffect } from 'react';\nimport { calcAnswer } from '../helper';\nimport EquationList from './EquationList';\nimport KeyBoard from './KeyBoard';\n//add new operators to below global variables\nconst operators = '*/+-^';\nconst operatorNoMinus = '*/+^';\nconst trigOperators = 'sincos';\n\nconst App = () => {\n  // answer = result of calculation\n  //input is the current user input from key pad\n  //inputString is the formula user is typing out,\n  //and that is showing up on screen\n  //formulas is an array of formula imputed by user\n  //this will be display below the calculator as a list\n  const [answer, setAnswer] = useState('');\n  const [input, setInput] = useState('0');\n  const [inputString, setInputString] = useState('');\n  const [formulas, setFormulas] = useState(\n    JSON.parse(localStorage.getItem('formulas')) || []\n  );\n\n  // handling numberical \\d or operator [*/+-] input by user\n  const handleInput = (value) => {\n    const inputVal = value;\n    let inputStr = inputString;\n    let ans = answer;\n    const prevInput = input;\n\n    //regex patterns\n    // const endWithOperator = /(\\*|\\/|-|\\+)$/;\n    // const endWithNumber = /\\d+$/;\n    const beginningZero = /(^0|\\*0|\\/0|-0|\\+0)$/;\n    const endWithPeriodZero = /\\.0+$/;\n\n    //********VALIDATIONS AND ASCERTIONS ******* */\n    //checking if there's an answer on the screen\n    if (ans !== '') {\n      //resetting screen\n      ans = '';\n      inputStr = '';\n    }\n\n    //check if consecutive operators are input **, */ , +* , etc\n    //if so, only accepting last operator\n    //because it just makes the number following it a negative\n    //ALSO check if multiple zeros are added in that are not followed by period\n    //SO it's NOT 1.0001 but 0001 , first is fine , second is not\n    //PLUS CHECK if there are 2 decimals submitted\n    if (\n      (operators.includes(prevInput) && operatorNoMinus.includes(inputVal)) ||\n      (inputVal === '-' && prevInput === '-') ||\n      (inputVal === '0' &&\n        beginningZero.test(inputStr) &&\n        !endWithPeriodZero.test(inputStr)) ||\n      (inputVal === '.' && prevInput === '.')\n    ) {\n      //in this case use only current operator and disregard prevous operator\n      //OR remove extra zero or period\n      inputStr = inputStr.substring(0, inputStr.length - 1);\n    }\n\n    //PLUS check if not trig function is followed by an operation\n    //such as sin*,cos+, sin/, sin+ etc .  HOWEVER, sin- or cos- is fine\n    //ALSO CHECKING if previous input is number ie 2sin or 5cos, must add *\n    //so have 2*sin, 5*cos ...\n    if (\n      trigOperators.includes(prevInput) &&\n      operatorNoMinus.includes(inputVal)\n    ) {\n      return;\n    } else if (!isNaN(prevInput) && trigOperators.includes(inputVal)) {\n      //!isNaN true => prevInput is a number, which means we need to\n      //add '*' in front of trig function\n      inputStr += '*';\n    }\n\n    //Finally after all the above checks and validations complete\n    //adding user inputed value to main input string\n    inputStr += inputVal;\n\n    //updating state\n    setAnswer(ans);\n    setInput(inputVal);\n    setInputString(inputStr);\n  };\n\n  // function to handle when user presses '='\n  const calculateInput = () => {\n    let inputStr = inputString;\n    const prevInput = input;\n\n    //VALIDATION **************\n    //checking if last character is an operator,\n    //if so removing it\n    if (operators.includes(prevInput)) {\n      //in this case operator\n      inputStr = inputStr.substring(0, inputStr.length - 1);\n    }\n\n    //check to make sure there's not an answer on the screen\n    //also check that inputStr is not empty\n    if (answer === '' && inputStr !== '') {\n      //parcing equation (inputString) user submitted and\n      //calculating result\n      const ans = calcAnswer(inputStr);\n\n      //adding formula to formula state variable\n      const formulasCopy = [...formulas];\n      formulasCopy.unshift(inputStr);\n      setFormulas(formulasCopy);\n\n      //appending result to inputString to display on screen\n      inputStr = inputStr + '=' + answer;\n\n      //setting state\n      setAnswer(ans);\n      setInput(ans);\n      setInputString(inputStr);\n    }\n  };\n\n  // function to handle when user presses 'AC'\n  const clearState = () => {\n    //reset state to initial conditions\n    setAnswer('');\n    setInput('0');\n    setInputString('');\n  };\n\n  const removeFormula = (index) => {\n    const formulasCopy = [...formulas];\n    formulasCopy.splice(index, 1);\n    setFormulas(formulasCopy);\n  };\n\n  //useEffect hook to add formulas to local storage\n  useEffect(() => {\n    localStorage.setItem('formulas', JSON.stringify(formulas));\n  }, [formulas]);\n\n  return (\n    <div className='d-flex flex-column align-items-center'>\n      <div id='calculator' className='container row'>\n        {/* top black screen showing formula and current input as it's\n        submitted by user */}\n        <div\n          id='display'\n          className='d-flex flex-column justify-content-around align-items-end'>\n          <span className='inputstring'>{inputString}</span>\n          <span id='input'>{input}</span>\n        </div>\n        {/* main keyboard for calculator where user inputs formula */}\n        <KeyBoard\n          clearState={clearState}\n          handleInput={handleInput}\n          calculateInput={calculateInput}\n        />\n      </div>\n      {/* list of equations below calculation, hit 'x' to remove\n      these are saved in local storage too */}\n      <EquationList formulas={formulas} removeFormula={removeFormula} />\n    </div>\n  );\n};\nexport default App;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport App from './components/App';\nimport '../node_modules/bootstrap/scss/bootstrap.scss';\nimport '../node_modules/bootstrap/scss/bootstrap-grid.scss';\nimport './css/style.css';\n\nrender(<App />, document.querySelector('#main'));\n"],"sourceRoot":""}